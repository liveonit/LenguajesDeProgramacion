# Generate Ruby code with `racc parser.racc -o parser.rb`

class Parser

  prechigh
    left '||'
    left '&&'
    nonassoc '==' '!=' '<' '<=' '>' '>='
    left '*' '/'
    left '+' '-'
    left UMINUS
    left '!'
  preclow
  options no_result_var

rule
  target
    : stmt { val[0] }
    | exp { val[0] }

  stmt
    : ID '=' exp ';'
      { StatementCreator.instance.create("Assignment",[val[0], val[2]]) }
    | '{' stmts '}'
      { StatementCreator.instance.create("Block1",[val[1]]) }
    | '{' '}'
      { StatementCreator.instance.create("Block2",[]) }
    | 'if' '(' exp ')' stmt 'else' stmt
      { StatementCreator.instance.create("IfThenElse1",[val[2], val[4], val[6]]) }
    | 'if' '(' exp ')' stmt
      { StatementCreator.instance.create("IfThenElse2",[val[2], val[4]]) }
    | 'while' '(' exp ')' stmt
      { StatementCreator.instance.create("While",[val[2], val[4]]) }
    | 'print' '(' exp ')' ';'
      { StatementCreator.instance.create("Print",[val[2]]) }
  stmts 
    : stmt
      { [val[0]] }
    | stmts stmt
      { val[0] << val[1] }
  exp
    : ID
      { ExpressionCreator.instance.create("ID",[val[0]])) }
    | NUM
      { ExpressionCreator.instance.create("NUM",[val[0]])) }
    | BOOL
      { if val[0] then
          TrueValue.instance
        else
          FalseValue.instance
        end
      }
    | '-' exp =UMINUS
      { ExpressionCreator.instance.create("-",[val[1]])) }
    | '!' exp
      { ExpressionCreator.instance.create("!",[val[1]])) }
    | exp '+' exp
      { ExpressionCreator.instance.create("+",[val[0],val[2]])) }
    | exp '-' exp
      { ExpressionCreator.instance.create("-",[val[0],val[2]])) }
    | exp '*' exp
      { ExpressionCreator.instance.create("*",[val[0],val[2]])) }
    | exp '/' exp
      { ExpressionCreator.instance.create("/",[val[0],val[2]])) }
    | exp '==' exp
      { ExpressionCreator.instance.create("==",[val[0],val[2]])) }
    | exp '!=' exp
      { ExpressionCreator.instance.create("!=",[val[0],val[2]])) }
    | exp '<' exp
      { ExpressionCreator.instance.create("<",[val[0],val[2]])) }
    | exp '<=' exp
      { ExpressionCreator.instance.create("<=",[val[0],val[2]])) }
    | exp '>' exp
      { ExpressionCreator.instance.create(">",[val[0],val[2]])) }
    | exp '>=' exp
      { ExpressionCreator.instance.create(">=",[val[0],val[2]])) }
    | exp '&&' exp
      { ExpressionCreator.instance.create("&&",[val[0],val[2]])) }
    | exp '||' exp
      { ExpressionCreator.instance.create("||",[val[0],val[2]])) }
    | '(' exp ')'
      { val[1] }

end

---- header ----

require 'strscan'
require_relative 'expressions'
require_relative 'statements'

class Lexer
  NUMBER = /\d+(\.\d+)?/
  BOOL = /true|false/
  KEYWORDS = /if|else|while|print/
  ID = /[a-zA-Z_]\w*/
  OPERS = /[-+*\/(){};]|[!=<>]=?|&&|\|\|/
  IGNORE = /(\/\/.*(\n|$)|\s)+/
  
  def initialize(input)
    @ss = StringScanner.new(input)
  end

  def next_token
    @ss.scan(IGNORE)
    return if @ss.eos?
    case
    when text = @ss.scan(NUMBER) then [:NUM, text.to_f]
    when text = @ss.scan(BOOL) then [:BOOL, text == "true"]
    when text = @ss.scan(KEYWORDS) then [text, text]
    when text = @ss.scan(ID) then [:ID, text]
    when text = @ss.scan(OPERS) then [text, text]
    else
      throw "Unexpected character #{@ss.getch}!"
    end
  end
end

---- inner ----

def next_token
  @lexer.next_token
end

def tokenize_string(input)
  @lexer = Lexer.new(input)
  tokens = []
  while token = @lexer.next_token
    tokens << token
  end
  tokens
end

def parse_string(input)
  @lexer = Lexer.new(input)
  do_parse
end


---- footer ----
